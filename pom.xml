<?xml version="1.0" encoding="UTF-8"?>
<!--
  NewBestSub â€“ Maven POM
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- Basic coordinates and project metadata -->
    <modelVersion>4.0.0</modelVersion>
    <groupId>it.uniud.newbestsub</groupId>
    <artifactId>NewBestSub</artifactId>
    <version>2.0.6</version>
    <url>https://github.com/Miccighel/NewBestSub</url>

    <!-- Organization info used by Maven site and artifact metadata -->
    <organization>
        <name>Uniud</name>
        <url>https://www.uniud.it/</url>
    </organization>

    <!-- Contributors and roles (exposed in site reports) -->
    <developers>
        <developer>
            <id>miccighel</id>
            <name>Michael Soprano</name>
            <email>michael.soprano@uniud.it</email>
            <organization>Uniud</organization>
            <organizationUrl>https://www.uniud.it/</organizationUrl>
            <roles>
                <role>Architect</role>
                <role>Developer</role>
            </roles>
            <timezone>Europe/Rome</timezone>
        </developer>
    </developers>

    <contributors>
        <contributor>
            <name>Kevin Roitero</name>
            <email>roitero.kevin@uniud.it</email>
            <organization>Uniud</organization>
            <organizationUrl>https://www.uniud.it/</organizationUrl>
            <roles>
                <role>Contributor</role>
            </roles>
            <timezone>Europe/Rome</timezone>
        </contributor>
        <contributor>
            <name>Riccardo Lunardi</name>
            <email>riccardo.lunardi@uniud.it</email>
            <organization>Uniud</organization>
            <organizationUrl>https://www.uniud.it/</organizationUrl>
            <roles>
                <role>Contributor</role>
            </roles>
            <timezone>Europe/Rome</timezone>
        </contributor>
        <contributor>
            <name>Stefano Mizzaro</name>
            <email>mizzaro@uniud.it</email>
            <url>http://users.dimi.uniud.it/~stefano.mizzaro/</url>
            <organization>Uniud</organization>
            <organizationUrl>https://www.uniud.it/</organizationUrl>
            <roles>
                <role>Supervisor</role>
            </roles>
            <timezone>Europe/Rome</timezone>
        </contributor>
    </contributors>

    <!-- Default artifact repositories (Central) -->
    <repositories>
        <repository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2</url>
        </repository>
    </repositories>

    <!-- Plugin repositories; Dokka dev feed is required for Kotlin 2.2.x compatibility -->
    <pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <name>Maven Central</name>
            <url>https://repo.maven.apache.org/maven2</url>
        </pluginRepository>
        <pluginRepository>
            <id>jetbrains-dokka-dev</id>
            <url>https://maven.pkg.jetbrains.space/kotlin/p/dokka/dev</url>
        </pluginRepository>
    </pluginRepositories>

    <!--
      Centralized versions and common build flags.
      Keep this section authoritative to avoid drift across modules/plugins.
    -->
    <properties>
        <!-- Java toolchain and encoding -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>22</maven.compiler.source>
        <maven.compiler.target>22</maven.compiler.target>

        <!-- Kotlin toolchain -->
        <kotlin.version>2.2.0</kotlin.version>
        <kotlin.stdlib.version>${kotlin.version}</kotlin.stdlib.version>
        <kotlin.test.version>${kotlin.version}</kotlin.test.version>
        <kotlinx.version>0.23.4</kotlinx.version>
        <kotlin.maven.plugin.version>${kotlin.version}</kotlin.maven.plugin.version>
        <kotlin.coroutines.version>1.10.2</kotlin.coroutines.version>

        <!-- Test stack -->
        <junit.jupiter.version>5.13.4</junit.jupiter.version>

        <!-- Documentation (Dokka dev build for Kotlin 2.2) -->
        <dokka.version>2.0.20-dev-383</dokka.version>
        <dokka.output.dir>${project.build.directory}/dokka</dokka.output.dir>

        <!-- Libraries (math, CLI, EA) -->
        <apache.commons.version>3.6.1</apache.commons.version>
        <apache.commons.cli>1.10.0</apache.commons.cli>

        <!-- Logging bridge: Log4j 2.x + SLF4J -->
        <log4j.api.version>2.24.3</log4j.api.version>
        <log4j.core.version>2.24.3</log4j.core.version>
        <slf4j.version>1.7.36</slf4j.version>

        <!-- CSV / jMetal core -->
        <opencsv.version>5.12.0</opencsv.version>
        <jmetal.version>6.9.1</jmetal.version>

        <!-- Columnar IO and compression -->
        <parquet.version>1.15.2</parquet.version>
        <hadoop.version>3.4.0</hadoop.version>
        <snappy.version>1.1.10.5</snappy.version>

        <!-- Build plugins (pin for reproducibility) -->
        <maven.assembly-plugin.version>3.7.1</maven.assembly-plugin.version>
        <maven.dependency-plugin.version>3.7.0</maven.dependency-plugin.version>
        <maven.jar-plugin.version>3.4.2</maven.jar-plugin.version>
        <maven.surefire-plugin.version>3.5.3</maven.surefire-plugin.version>

        <!-- Console colors on supported terminals -->
        <jansi.version>2.4.2</jansi.version>

        <!-- Quiet transitive warnings; small utility annotations -->
        <yetus.audience.version>0.15.1</yetus.audience.version>

        <!-- Fixed distribution tag used for fat-jar filenames -->
        <dist.version>2.0</dist.version>

        <!-- Collections performance utilities -->
        <fastutil.version>8.5.14</fastutil.version>
    </properties>

    <!-- Profiles for alternate doc layouts; "pages" writes Dokka into /docs for GitHub Pages hosting -->
    <profiles>
        <profile>
            <id>pages</id>
            <properties>
                <dokka.output.dir>${project.basedir}/docs</dokka.output.dir>
            </properties>
        </profile>
    </profiles>

    <!--
      Dependency management:
      - Import Log4j BOM for consistent artifact alignment.
      - Pin Yetus annotations (used as optional compile-time hints).
    -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-bom</artifactId>
                <version>${log4j.api.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.yetus</groupId>
                <artifactId>audience-annotations</artifactId>
                <version>${yetus.audience.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--
      Runtime and test dependencies.
      Notes:
      - Parquet/Hadoop exclude legacy SLF4J/Log4j bindings to prevent clashes.
      - Kotlin stdlib/test versions follow the toolchain.
    -->
    <dependencies>
        <!-- Numerics and CLI -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-math3</artifactId>
            <version>${apache.commons.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>${apache.commons.cli}</version>
        </dependency>

        <!-- Logging stack -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j.api.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j.core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j.api.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <!-- CSV IO -->
        <dependency>
            <groupId>com.opencsv</groupId>
            <artifactId>opencsv</artifactId>
            <version>${opencsv.version}</version>
        </dependency>

        <!-- Evolutionary algorithms (jMetal) -->
        <dependency>
            <groupId>org.uma.jmetal</groupId>
            <artifactId>jmetal-core</artifactId>
            <version>${jmetal.version}</version>
        </dependency>
        <dependency>
            <groupId>org.uma.jmetal</groupId>
            <artifactId>jmetal-algorithm</artifactId>
            <version>${jmetal.version}</version>
        </dependency>
        <dependency>
            <groupId>org.uma.jmetal</groupId>
            <artifactId>jmetal-component</artifactId>
            <version>${jmetal.version}</version>
        </dependency>

        <!-- Kotlin stdlib/test -->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-test</artifactId>
            <version>${kotlin.test.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlinx</groupId>
            <artifactId>kotlinx-coroutines-core</artifactId>
            <version>${kotlin.coroutines.version}</version>
        </dependency>

        <!-- JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Kotlin stdlib (explicit for reproducibility) -->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
            <version>${kotlin.version}</version>
        </dependency>

        <!-- Console colors at runtime (optional) -->
        <dependency>
            <groupId>org.fusesource.jansi</groupId>
            <artifactId>jansi</artifactId>
            <version>${jansi.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Columnar IO and Hadoop shims (bindings excluded) -->
        <dependency>
            <groupId>org.apache.parquet</groupId>
            <artifactId>parquet-hadoop</artifactId>
            <version>${parquet.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-reload4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-common</artifactId>
            <version>${hadoop.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-reload4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Compression library (bundles native backends) -->
        <dependency>
            <groupId>org.xerial.snappy</groupId>
            <artifactId>snappy-java</artifactId>
            <version>${snappy.version}</version>
        </dependency>

        <!-- Compile-time optional: audience annotations -->
        <dependency>
            <groupId>org.apache.yetus</groupId>
            <artifactId>audience-annotations</artifactId>
            <version>${yetus.audience.version}</version>
            <optional>true</optional>
        </dependency>

        <!-- High-performance collections -->
        <dependency>
            <groupId>it.unimi.dsi</groupId>
            <artifactId>fastutil</artifactId>
            <version>${fastutil.version}</version>
        </dependency>
    </dependencies>

    <build>
        <!--
          finalName controls produced artifact base name.
          We use a stable distribution tag (dist.version) for fat jars.
        -->
        <finalName>${project.artifactId}-${dist.version}</finalName>

        <!-- Kotlin sources layout -->
        <sourceDirectory>src/main/kotlin</sourceDirectory>
        <testSourceDirectory>src/test/kotlin</testSourceDirectory>

        <plugins>

            <!--
              Assembly: produces runnable fat-jars.
              - jar-with-dependencies: standard shaded jar
              - test-jar-with-dependencies: custom descriptor for test scope
              Manifest mainClass enables `java -jar`.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>${maven.assembly-plugin.version}</version>
                <configuration>
                    <finalName>${project.artifactId}-${dist.version}</finalName>
                    <appendAssemblyId>true</appendAssemblyId>
                    <archive>
                        <manifest>
                            <mainClass>it.uniud.newbestsub.program.Program</mainClass>
                        </manifest>
                    </archive>
                    <descriptors>
                        <descriptor>src/main/assembly/test-jar-with-dependencies.xml</descriptor>
                    </descriptors>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Copies third-party jars to target/lib for classpath-friendly layouts -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven.dependency-plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Builds the project test-jar and sets a runnable manifest for the main jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.jar-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>it.uniud.newbestsub.program.Program</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!-- Kotlin compiler (targets Java 22) -->
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <jvmTarget>${maven.compiler.target}</jvmTarget>
                </configuration>
            </plugin>

            <!-- Surefire for unit tests; enable Vector API incubator module for JDK 22 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire-plugin.version}</version>
                <configuration>
                    <argLine>--add-modules jdk.incubator.vector</argLine>
                </configuration>
            </plugin>

            <!-- Optional: Failsafe for integration tests with the same module flag -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven.surefire-plugin.version}</version>
                <configuration>
                    <argLine>--add-modules jdk.incubator.vector</argLine>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Dokka documentation; bound to verify so compiled classes are available -->
            <plugin>
                <groupId>org.jetbrains.dokka</groupId>
                <artifactId>dokka-maven-plugin</artifactId>
                <version>${dokka.version}</version>
                <executions>
                    <execution>
                        <id>dokka-site</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>dokka</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <outputDir>target/dokka</outputDir>
                    <sourceDirectories>
                        <dir>src/main/kotlin</dir>
                    </sourceDirectories>
                    <moduleName>NewBestSub</moduleName>
                    <includes>
                        <include>src/docs/module.md</include>
                        <include>src/docs/packages/it.uniud.newbestsub.dataset.md</include>
                        <include>src/docs/packages/it.uniud.newbestsub.math.md</include>
                        <include>src/docs/packages/it.uniud.newbestsub.problem.md</include>
                        <include>src/docs/packages/it.uniud.newbestsub.program.md</include>
                        <include>src/docs/packages/it.uniud.newbestsub.utils.md</include>
                    </includes>
                    <documentedVisibilities>
                        <visibility>PUBLIC</visibility>
                    </documentedVisibilities>
                    <reportUndocumented>false</reportUndocumented>
                    <skipEmptyPackages>true</skipEmptyPackages>
                    <sourceLinks>
                        <link>
                            <path>src/main/kotlin</path>
                            <url>https://github.com/Miccighel/NewBestSub/blob/main/src/main/kotlin</url>
                            <lineSuffix>#L</lineSuffix>
                        </link>
                        <link>
                            <path>src/test/kotlin</path>
                            <url>https://github.com/Miccighel/NewBestSub/blob/main/src/test/kotlin</url>
                            <lineSuffix>#L</lineSuffix>
                        </link>
                    </sourceLinks>
                </configuration>
            </plugin>

        </plugins>
    </build>

    <!--
      Reporting for `mvn site`.
      Useful for GitHub Pages or local audits (licenses, SCM, plugins, dependencies).
    -->
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>3.9.0</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>index</report>
                            <report>summary</report>
                            <report>licenses</report>
                            <report>scm</report>
                            <report>plugins</report>
                            <report>plugin-management</report>
                            <report>dependencies</report>
                            <report>dependency-management</report>
                            <!-- omit dependency-info to keep the site concise -->
                            <report>team</report>
                            <report>ci-management</report>
                            <report>issue-management</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>

</project>
